{
    "request": {
        "headers": {
            "accept": "application/json",
            "content-type": "application/json"
        },
        "payload": {
            "aggregation": {
                "aggregationInterval": {
                    "of": "P1D"
                },
                "evalscript": "\n//VERSION=3\nfunction setup() {\n  return {\n    input: [{\n      bands: [\"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"B07\", \"B08\", \"B8A\", \"B09\", \"B10\", \"B11\", \"B12\", \"CLM\", \"CLP\", \"dataMask\"],\n      units: \"DN\"\n    }],\n    output: [\n      {\n        id: \"bands\",\n        bands: [\"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"B07\", \"B08\", \"B8A\", \"B09\", \"B10\", \"B11\", \"B12\"],\n        sampleType: \"UINT16\"\n      },\n      {\n        id: \"masks\",\n        bands: [\"CLM\"],\n        sampleType: \"UINT16\"\n      },\n      {\n        id: \"indices\",\n        bands: [\"NDVI\", \"NDVI_RE1\", \"NBSI\", \"CLP\"],\n        sampleType: \"UINT16\"\n      },\n      {\n        id: \"dataMask\",\n        bands: 1\n      }]\n  }\n}\n\nfunction evaluatePixel(samples) {\n    // Normalised Difference Vegetation Index and variation\n    let NDVI = index(samples.B08, samples.B04);\n    let NDVI_RE1 = index(samples.B08, samples.B05);\n\n    // Bare Soil Index \n    let NBSI = index((samples.B11 + samples.B04), (samples.B08 + samples.B02));\n    \n    // cloud probability normalized to 0..1\n    let CLP = samples.CLP/255.0;\n        \n    const f = 5000;\n    return {\n        bands: [samples.B01, samples.B02, samples.B03, samples.B04, samples.B05, samples.B06, \n                samples.B07, samples.B08, samples.B8A, samples.B09, samples.B10, samples.B11, samples.B12],\n        masks: [samples.CLM],\n        indices: [toUINT(NDVI, f), toUINT(NDVI_RE1, f), toUINT(NBSI, f), toUINT(CLP, f)],\n        dataMask: [samples.dataMask]\n    };\n}\n\nfunction toUINT(product, constant){\n  // Clamp the output to [-1, 10] and convert it to a UNIT16\n  // value that can be converted back to float later.\n  if (product < -1) {\n    product = -1;\n  } else if (product > 10) {\n    product = 10;\n  }\n  return Math.round(product * constant) + constant;\n}\n\nfunction feature_ratio(band_a, band_b, constant){\n  // Compute Band Ratio of the form A/B + constant.\n  return (band_a / band_b) + constant;\n}\n\n",
                "height": 165,
                "timeRange": {
                    "from": "2022-03-01T00:00:00Z",
                    "to": "2022-09-01T23:59:59Z"
                },
                "width": 194
            },
            "calculations": {
                "default": {
                    "statistics": {
                        "default": {
                            "percentiles": {
                                "k": [
                                    5,
                                    50,
                                    95
                                ]
                            }
                        }
                    }
                }
            },
            "input": {
                "bounds": {
                    "bbox": [
                        14.26,
                        46.11,
                        14.51,
                        46.26
                    ],
                    "properties": {
                        "crs": "http://www.opengis.net/def/crs/EPSG/0/4326"
                    }
                },
                "data": [
                    {
                        "dataFilter": {
                            "maxCloudCoverage": 100
                        },
                        "type": "sentinel-2-l1c"
                    }
                ]
            }
        },
        "timestamp": "2025-02-17T12:40:42.529528",
        "url": "https://services.sentinel-hub.com/api/v1/statistics"
    },
    "response": {
        "elapsed": 24.309692,
        "headers": {
            "Connection": "keep-alive",
            "Content-Type": "application/json;charset=utf-8",
            "Date": "Mon, 17 Feb 2025 10:40:42 GMT",
            "Transfer-Encoding": "chunked",
            "access-control-allow-credentials": "true",
            "access-control-allow-headers": "origin,content-type,accept,accept-crs,authorization,cache-control",
            "access-control-allow-methods": "GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH",
            "access-control-allow-origin": "*",
            "access-control-max-age": "3600",
            "x-processingunits-spent": "22.590065002441406"
        },
        "status_code": 200
    }
}